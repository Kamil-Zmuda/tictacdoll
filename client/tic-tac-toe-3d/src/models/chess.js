/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useDrag } from "@use-gesture/react";
import { animated, useSpring } from "@react-spring/three";
import { useThree } from "@react-three/fiber";
import * as THREE from "three";

const ChessSize = {
  LARGE: "large",
  MEDIUM: "medium",
  SMALL: "small"
};

const Chess = props => {
  const { nodes, materials } = useGLTF("/assets/chess.glb");
  const { chessSize, color, setIsDragging, floorPlane, ...others } = props;

  const [pos, setPos] = useState([0, 1, 0]);
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;

  let planeIntersectPoint = new THREE.Vector3();

  const dragObjectRef = useRef();

  const [spring, api] = useSpring(() => ({
    // position: [0, 0, 0],
    position: pos,
    scale: 1,
    rotation: [0, 0, 0],
    config: { friction: 10 }
  }));

  const bind = useDrag(
    ({ active, movement: [x, y], timeStamp, event }) => {
      if (active) {
        event.ray.intersectPlane(floorPlane, planeIntersectPoint);
        setPos([planeIntersectPoint.x, 1.5, planeIntersectPoint.z]);
      }

      setIsDragging(active);

      api.start({
        // position: active ? [x / aspect, -y / aspect, 0] : [0, 0, 0],
        position: pos,
        scale: active ? 1.2 : 1
      });
      return timeStamp;
    },
    { delay: true }
  );

  return (
    <group {...props} dispose={null}>
      {chessSize === ChessSize.LARGE && (
        <group position={[0, 1.5, 0]} rotation={[Math.PI / 2, 0, 0]}>
          <animated.mesh
            {...spring}
            {...bind()}
            castShadow
            receiveShadow
            geometry={nodes.materials1.geometry}
            material={materials.m010}
          />
          <animated.mesh
            {...spring}
            {...bind()}
            castShadow
            receiveShadow
            geometry={nodes.materials1_1.geometry}
            material={materials.m007}
          />
          <animated.mesh
            {...spring}
            {...bind()}
            castShadow
            receiveShadow
            geometry={nodes.materials1_2.geometry}
            material={materials.n}
          />
          <animated.mesh
            {...spring}
            {...bind()}
            castShadow
            receiveShadow
            geometry={nodes.materials1_3.geometry}
            material={materials.m011}
          />
        </group>
      )}
      {chessSize === ChessSize.MEDIUM && (
        <group position={[2, 0.9, 0]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh castShadow receiveShadow geometry={nodes.materials2.geometry} material={materials.m001} />
          <mesh castShadow receiveShadow geometry={nodes.materials2_1.geometry} material={materials.m002} />
          <mesh castShadow receiveShadow geometry={nodes.materials2_2.geometry} material={materials.n001} />
          <mesh castShadow receiveShadow geometry={nodes.materials2_3.geometry} material={materials.n003} />
        </group>
      )}
      {chessSize === chessSize.SMALL && (
        <group position={[3, 0.57, 0]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh castShadow receiveShadow geometry={nodes.materials3.geometry} material={materials.m004} />
          <mesh castShadow receiveShadow geometry={nodes.materials3_1.geometry} material={materials.m005} />
          <mesh castShadow receiveShadow geometry={nodes.materials3_2.geometry} material={materials.m006} />
          <mesh castShadow receiveShadow geometry={nodes.materials3_3.geometry} material={materials.n002} />
        </group>
      )}
    </group>
  );
};

export { Chess, ChessSize };

useGLTF.preload("/assets/chess.glb");
